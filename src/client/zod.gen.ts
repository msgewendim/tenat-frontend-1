// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zCreateUserDto = z.object({
    name: z.string(),
    email: z.string(),
    mobile: z.string(),
    address: z.object({}),
    role: z.string(),
    orders: z.array(z.string()).optional(),
    cart: z.array(z.string()).optional()
});

export const zCartItem = z.object({
    productId: z.string(),
    quantity: z.number().gte(1),
    size: z.string()
});

export const zUser = z.object({
    _id: z.string(),
    name: z.string(),
    email: z.string(),
    mobile: z.string(),
    address: z.object({}),
    role: z.enum([
        'user',
        'admin',
        'moderator'
    ]),
    orders: z.array(z.string()).optional(),
    cart: z.array(zCartItem).optional(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime()
});

export const zUpdateUserDto = z.object({});

export const zCartItemDto = z.object({});

export const zProductSizeDto = z.object({
    sizeName: z.string(),
    sizeQuantity: z.number()
});

export const zPricingDto = z.object({
    size: zProductSizeDto,
    price: z.number()
});

export const zCategoryDto = z.object({
    nameInHebrew: z.string(),
    nameInEnglish: z.string()
});

export const zSubCategoryDto = z.object({
    nameInHebrew: z.string(),
    nameInEnglish: z.string(),
    nameOfParentCategory: z.string()
});

export const zFeatureDto = z.object({
    title: z.string(),
    description: z.string()
});

export const zFeatureObjectDto = z.object({
    value: z.array(zFeatureDto)
});

export const zCreateProductDto = z.object({
    name: z.string(),
    shortDescription: z.string(),
    pricing: z.array(zPricingDto),
    image: z.string().optional(),
    images: z.array(z.string()).optional(),
    categories: z.array(zCategoryDto),
    subCategories: z.array(zSubCategoryDto).optional(),
    features: zFeatureObjectDto,
    totalSales: z.number().optional()
});

export const zProductSize = z.object({
    sizeName: z.string(),
    sizeQuantity: z.number()
});

export const zPricing = z.object({
    size: zProductSize,
    price: z.number()
});

export const zCategory = z.object({
    nameInHebrew: z.string(),
    nameInEnglish: z.string()
});

export const zSubCategory = z.object({
    nameInHebrew: z.string(),
    nameInEnglish: z.string(),
    nameOfParentCategory: z.string()
});

export const zFeature = z.object({
    title: z.string(),
    description: z.string(),
    _id: z.string().optional()
});

export const zFeatureObject = z.object({
    value: z.array(zFeature)
});

export const zProduct = z.object({
    name: z.string(),
    shortDescription: z.string().min(5).max(1000),
    pricing: z.array(zPricing),
    image: z.string().optional(),
    images: z.array(z.string()).optional(),
    categories: z.array(zCategory),
    subCategories: z.array(zSubCategory).optional(),
    features: zFeatureObject,
    totalSales: z.number().gte(0).default(0),
    _id: z.string().optional()
});

export const zUpdateProductDto = z.object({});

export const zIngredientDto = z.object({
    name: z.string(),
    quantity: z.string(),
    existsInProducts: z.boolean().optional()
});

export const zInstructionDto = z.object({
    step: z.number(),
    description: z.string()
});

export const zCreateRecipeDto = z.object({
    name: z.string(),
    description: z.string(),
    image: z.string().optional(),
    categories: z.array(zCategoryDto),
    ingredients: z.array(zIngredientDto),
    difficulty: z.enum([
        'Easy',
        'Medium',
        'Hard'
    ]),
    instructions: z.array(zInstructionDto),
    prepTime: z.string(),
    servings: z.number()
});

export const zIngredient = z.object({
    name: z.string().min(3).max(100),
    quantity: z.string(),
    existsInProducts: z.boolean().default(false)
});

export const zInstruction = z.object({
    step: z.number(),
    description: z.string()
});

export const zRecipe = z.object({
    name: z.string(),
    description: z.string().min(5).max(1000),
    image: z.string(),
    categories: z.array(zCategory),
    ingredients: z.array(zIngredient),
    difficulty: z.enum([
        'Easy',
        'Medium',
        'Hard'
    ]),
    instructions: z.array(zInstruction),
    prepTime: z.string(),
    servings: z.number().gte(1).lte(100),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime(),
    _id: z.string().optional()
});

export const zUpdateRecipeDto = z.object({});

export const zCreatePackageDto = z.object({
    name: z.string(),
    image: z.string().optional(),
    price: z.number(),
    cookingTime: z.number(),
    ingredientsQuantity: z.number(),
    peoplesQuantity: z.number()
});

export const zPackage = z.object({
    name: z.string(),
    image: z.string().optional(),
    price: z.number(),
    cookingTime: z.number(),
    ingredientsQuantity: z.number(),
    peoplesQuantity: z.number().gte(1).lte(100),
    _id: z.string().optional()
});

export const zUpdatePackageDto = z.object({});

export const zAddressDto = z.object({
    street: z.string(),
    streetNum: z.string(),
    city: z.string(),
    postal_code: z.string().optional(),
    country: z.string().optional()
});

export const zCustomerDto = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    phone: z.string(),
    address: zAddressDto
});

export const zCreateOrderDto = z.object({
    customer: zCustomerDto,
    items: z.array(zCartItemDto),
    totalPrice: z.number()
});

export const zOrderEntity = z.object({});

export const zMinimalCartItemDto = z.object({
    itemId: z.string(),
    quantity: z.number(),
    size: z.string(),
    price: z.number(),
    itemType: z.enum([
        'Product',
        'Package'
    ])
});

export const zCheckoutPayloadDto = z.object({
    totalPrice: z.number(),
    customer: zCustomerDto,
    orderItems: z.array(zMinimalCartItemDto)
});

export const zUpdateOrderDto = z.object({});

export const zSingleUploadResponseDto = z.object({
    originalName: z.string(),
    url: z.string(),
    size: z.number(),
    mimeType: z.string()
});

export const zAddress = z.object({
    street: z.string(),
    streetNum: z.string(),
    city: z.string(),
    postal_code: z.string().optional(),
    country: z.string().default('Israel')
});

export const zCustomer = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    phone: z.string(),
    address: zAddress
});

export const zOrderItem = z.object({
    item: z.string(),
    itemType: z.enum([
        'Product',
        'Package'
    ]),
    quantity: z.number().gte(1),
    price: z.number().gte(0),
    size: z.string(),
    name: z.string(),
    image: z.string().optional()
});

export const zPaymentDetails = z.object({
    transaction_uid: z.string().optional(),
    transaction_status: z.string().optional(),
    transaction_amount: z.number().optional(),
    transaction_currency: z.string().default('ILS'),
    transaction_date: z.string().datetime().optional(),
    transaction_type: z.string().optional(),
    number_of_payments: z.number().default(1),
    first_payment_amount: z.number().optional(),
    rest_payments_amount: z.number().optional(),
    card_holder_name: z.string().optional(),
    customer_uid: z.string().optional(),
    terminal_uid: z.string().optional()
});

export const zOrder = z.object({
    customer: zCustomer,
    items: z.array(zOrderItem),
    totalPrice: z.number().gte(0),
    status: z.enum([
        'pending',
        'processing',
        'paid',
        'failed',
        'cancelled'
    ]),
    paymentDetails: zPaymentDetails.optional(),
    createdAt: z.string().datetime(),
    updatedAt: z.string().datetime()
});

export const zAppControllerGetHelloData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zAppControllerHealthCheckData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zUsersControllerFindAllData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Return all users.
 */
export const zUsersControllerFindAllResponse = z.array(zUser);

export const zUsersControllerCreateData = z.object({
    body: zCreateUserDto,
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * The user has been successfully created.
 */
export const zUsersControllerCreateResponse = zUser;

export const zUsersControllerRemoveData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

export const zUsersControllerFindOneData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Return a single user.
 */
export const zUsersControllerFindOneResponse = zUser;

export const zUsersControllerUpdateData = z.object({
    body: zUpdateUserDto,
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * The user has been successfully updated.
 */
export const zUsersControllerUpdateResponse = zUser;

export const zUsersControllerClearCartData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * The cart has been successfully cleared.
 */
export const zUsersControllerClearCartResponse = zUser;

export const zUsersControllerAddToCartData = z.object({
    body: zCartItemDto,
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * The item has been successfully added to the cart.
 */
export const zUsersControllerAddToCartResponse = zUser;

export const zProductsControllerFindAllData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.number(),
        limit: z.number(),
        searchTerm: z.string(),
        category: z.string(),
        subCategory: z.string(),
        excludeById: z.string()
    })
});

/**
 * Return all products.
 */
export const zProductsControllerFindAllResponse = z.array(zProduct);

export const zProductsControllerCreateData = z.object({
    body: zCreateProductDto,
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * The product has been successfully created.
 */
export const zProductsControllerCreateResponse = zProduct;

export const zProductsControllerGetProductsByNameData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Return products by name.
 */
export const zProductsControllerGetProductsByNameResponse = z.array(zProduct);

export const zProductsControllerGetRandomProductsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.number(),
        limit: z.number()
    })
});

/**
 * Return random products.
 */
export const zProductsControllerGetRandomProductsResponse = z.array(zProduct);

export const zProductsControllerRemoveData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

export const zProductsControllerFindOneData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Return a single product.
 */
export const zProductsControllerFindOneResponse = zProduct;

export const zProductsControllerUpdateData = z.object({
    body: zUpdateProductDto,
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * The product has been successfully updated.
 */
export const zProductsControllerUpdateResponse = zProduct;

export const zRecipesControllerFindAllData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.number(),
        limit: z.number(),
        searchTerm: z.string(),
        category: z.string(),
        excludeById: z.string()
    })
});

/**
 * Return all recipes.
 */
export const zRecipesControllerFindAllResponse = z.array(zRecipe);

export const zRecipesControllerCreateData = z.object({
    body: zCreateRecipeDto,
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * The recipe has been successfully created.
 */
export const zRecipesControllerCreateResponse = zRecipe;

export const zRecipesControllerGetRecipesByNameData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        name: z.string()
    })
});

/**
 * Return recipes by name.
 */
export const zRecipesControllerGetRecipesByNameResponse = z.array(zRecipe);

export const zRecipesControllerGetRandomRecipesData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.number(),
        limit: z.number()
    })
});

/**
 * Return random recipes.
 */
export const zRecipesControllerGetRandomRecipesResponse = z.array(zRecipe);

export const zRecipesControllerRemoveData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

export const zRecipesControllerFindOneData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Return a single recipe.
 */
export const zRecipesControllerFindOneResponse = zRecipe;

export const zRecipesControllerUpdateData = z.object({
    body: zUpdateRecipeDto,
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * The recipe has been successfully updated.
 */
export const zRecipesControllerUpdateResponse = zRecipe;

export const zPackagesControllerFindAllData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.number(),
        limit: z.number()
    })
});

/**
 * Return all packages.
 */
export const zPackagesControllerFindAllResponse = z.array(zPackage);

export const zPackagesControllerCreateData = z.object({
    body: zCreatePackageDto,
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * The package has been successfully created.
 */
export const zPackagesControllerCreateResponse = zPackage;

export const zPackagesControllerGetRandomPackagesData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.number(),
        limit: z.number()
    })
});

/**
 * Return random packages.
 */
export const zPackagesControllerGetRandomPackagesResponse = z.array(zPackage);

export const zPackagesControllerRemoveData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

export const zPackagesControllerFindOneData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Return a single package.
 */
export const zPackagesControllerFindOneResponse = zPackage;

export const zPackagesControllerUpdateData = z.object({
    body: zUpdatePackageDto,
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * The package has been successfully updated.
 */
export const zPackagesControllerUpdateResponse = zPackage;

export const zOrdersControllerFindAllData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.number().optional(),
        limit: z.number().optional()
    }).optional()
});

/**
 * Orders retrieved successfully
 */
export const zOrdersControllerFindAllResponse = z.object({
    orders: z.array(zOrderEntity).optional(),
    total: z.number().optional(),
    page: z.number().optional(),
    totalPages: z.number().optional()
});

export const zOrdersControllerCreateData = z.object({
    body: zCreateOrderDto,
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Order created successfully
 */
export const zOrdersControllerCreateResponse = zOrderEntity;

export const zOrdersControllerGenerateSaleData = z.object({
    body: zCheckoutPayloadDto,
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Payment link generated successfully
 */
export const zOrdersControllerGenerateSaleResponse = z.object({
    order: zOrderEntity.optional(),
    paymentLink: z.string().optional(),
    pageRequestUid: z.string().optional()
});

export const zOrdersControllerHandlePaymentWebhookData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    headers: z.object({
        'x-payplus-signature': z.string()
    })
});

/**
 * Webhook processed successfully
 */
export const zOrdersControllerHandlePaymentWebhookResponse = zOrderEntity;

export const zOrdersControllerNotifyData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

export const zOrdersControllerFindByCustomerEmailData = z.object({
    body: z.never().optional(),
    path: z.object({
        email: z.string()
    }),
    query: z.never().optional()
});

/**
 * Customer orders retrieved successfully
 */
export const zOrdersControllerFindByCustomerEmailResponse = z.array(zOrderEntity);

export const zOrdersControllerRemoveData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

export const zOrdersControllerFindOneData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Order retrieved successfully
 */
export const zOrdersControllerFindOneResponse = zOrderEntity;

export const zOrdersControllerUpdateData = z.object({
    body: zUpdateOrderDto,
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Order updated successfully
 */
export const zOrdersControllerUpdateResponse = zOrderEntity;

export const zUploadControllerUploadImagesPublicData = z.object({
    body: z.object({
        file: z.string().optional(),
        files: z.array(z.string()).optional()
    }),
    path: z.never().optional(),
    query: z.object({
        folder: z.string().optional()
    }).optional()
});

/**
 * Upload successful
 */
export const zUploadControllerUploadImagesPublicResponse = zSingleUploadResponseDto;

export const zUploadControllerUploadImagesData = z.object({
    body: z.object({
        file: z.string().optional(),
        files: z.array(z.string()).optional()
    }),
    path: z.never().optional(),
    query: z.object({
        folder: z.string().optional()
    }).optional()
});

/**
 * Upload successful
 */
export const zUploadControllerUploadImagesResponse = zSingleUploadResponseDto;
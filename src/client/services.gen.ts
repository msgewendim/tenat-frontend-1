// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetAllProductsError, GetAllProductsResponse, PostProductsData, PostProductsError, PostProductsResponse, GetProductData, GetProductError, GetProductResponse, DeleteProductsByIdData, DeleteProductsByIdError, DeleteProductsByIdResponse, PutProductsByIdData, PutProductsByIdError, PutProductsByIdResponse, GetTopProductsError, GetTopProductsResponse, GetAllRecipesError, GetAllRecipesResponse, PostRecipesData, PostRecipesError, PostRecipesResponse, GetRecipeData, GetRecipeError, GetRecipeResponse, DeleteRecipesByIdData, DeleteRecipesByIdError, DeleteRecipesByIdResponse, PutRecipesByIdData, PutRecipesByIdError, PutRecipesByIdResponse, GetTopRecipesError, GetTopRecipesResponse, GetAllPackagesError, GetAllPackagesResponse, PostPackagesData, PostPackagesError, PostPackagesResponse, GetPackageData, GetPackageError, GetPackageResponse, DeletePackagesByIdData, DeletePackagesByIdError, DeletePackagesByIdResponse, PutPackagesByIdData, PutPackagesByIdError, PutPackagesByIdResponse, GetTopPackagesError, GetTopPackagesResponse, PostOrdersV1PaymentsFormData, PostOrdersV1PaymentsFormError, PostOrdersV1PaymentsFormResponse, GetOrdersPaymentStatusError, GetOrdersPaymentStatusResponse, GetAllOrdersError, GetAllOrdersResponse, PostOrdersNotifyError, PostOrdersNotifyResponse, PostUsersData, PostUsersError, PostUsersResponse, PostUsersAddToCartData, PostUsersAddToCartError, PostUsersAddToCartResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get all products
 */
export const getAllProducts = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllProductsResponse, GetAllProductsError, ThrowOnError>({
    ...options,
    url: '/products'
}); };

/**
 * Add a new product
 */
export const postProducts = <ThrowOnError extends boolean = false>(options: Options<PostProductsData, ThrowOnError>) => { return (options?.client ?? client).post<PostProductsResponse, PostProductsError, ThrowOnError>({
    ...options,
    url: '/products'
}); };

/**
 * Get a product by ID
 */
export const getProduct = <ThrowOnError extends boolean = false>(options: Options<GetProductData, ThrowOnError>) => { return (options?.client ?? client).get<GetProductResponse, GetProductError, ThrowOnError>({
    ...options,
    url: '/products/{id}'
}); };

/**
 * Delete a product by ID
 */
export const deleteProductsById = <ThrowOnError extends boolean = false>(options: Options<DeleteProductsByIdData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteProductsByIdResponse, DeleteProductsByIdError, ThrowOnError>({
    ...options,
    url: '/products/{id}'
}); };

/**
 * Update a product by ID
 */
export const putProductsById = <ThrowOnError extends boolean = false>(options: Options<PutProductsByIdData, ThrowOnError>) => { return (options?.client ?? client).put<PutProductsByIdResponse, PutProductsByIdError, ThrowOnError>({
    ...options,
    url: '/products/{id}'
}); };

/**
 * Get top products
 */
export const getTopProducts = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetTopProductsResponse, GetTopProductsError, ThrowOnError>({
    ...options,
    url: '/products/top-products'
}); };

/**
 * Get all recipes
 */
export const getAllRecipes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllRecipesResponse, GetAllRecipesError, ThrowOnError>({
    ...options,
    url: '/recipes'
}); };

/**
 * Add a new recipe
 */
export const postRecipes = <ThrowOnError extends boolean = false>(options: Options<PostRecipesData, ThrowOnError>) => { return (options?.client ?? client).post<PostRecipesResponse, PostRecipesError, ThrowOnError>({
    ...options,
    url: '/recipes'
}); };

/**
 * Get a recipe by ID
 */
export const getRecipe = <ThrowOnError extends boolean = false>(options: Options<GetRecipeData, ThrowOnError>) => { return (options?.client ?? client).get<GetRecipeResponse, GetRecipeError, ThrowOnError>({
    ...options,
    url: '/recipes/{id}'
}); };

/**
 * Delete a recipe by ID
 */
export const deleteRecipesById = <ThrowOnError extends boolean = false>(options: Options<DeleteRecipesByIdData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteRecipesByIdResponse, DeleteRecipesByIdError, ThrowOnError>({
    ...options,
    url: '/recipes/{id}'
}); };

/**
 * Update a recipe by ID
 */
export const putRecipesById = <ThrowOnError extends boolean = false>(options: Options<PutRecipesByIdData, ThrowOnError>) => { return (options?.client ?? client).put<PutRecipesByIdResponse, PutRecipesByIdError, ThrowOnError>({
    ...options,
    url: '/recipes/{id}'
}); };

/**
 * Get top recipes
 */
export const getTopRecipes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetTopRecipesResponse, GetTopRecipesError, ThrowOnError>({
    ...options,
    url: '/recipes/top-recipes'
}); };

/**
 * Get all packages
 */
export const getAllPackages = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllPackagesResponse, GetAllPackagesError, ThrowOnError>({
    ...options,
    url: '/packages'
}); };

/**
 * Add a new package
 */
export const postPackages = <ThrowOnError extends boolean = false>(options: Options<PostPackagesData, ThrowOnError>) => { return (options?.client ?? client).post<PostPackagesResponse, PostPackagesError, ThrowOnError>({
    ...options,
    url: '/packages'
}); };

/**
 * Get a package by ID
 */
export const getPackage = <ThrowOnError extends boolean = false>(options: Options<GetPackageData, ThrowOnError>) => { return (options?.client ?? client).get<GetPackageResponse, GetPackageError, ThrowOnError>({
    ...options,
    url: '/packages/{id}'
}); };

/**
 * Delete a package by ID
 */
export const deletePackagesById = <ThrowOnError extends boolean = false>(options: Options<DeletePackagesByIdData, ThrowOnError>) => { return (options?.client ?? client).delete<DeletePackagesByIdResponse, DeletePackagesByIdError, ThrowOnError>({
    ...options,
    url: '/packages/{id}'
}); };

/**
 * Update a package by ID
 */
export const putPackagesById = <ThrowOnError extends boolean = false>(options: Options<PutPackagesByIdData, ThrowOnError>) => { return (options?.client ?? client).put<PutPackagesByIdResponse, PutPackagesByIdError, ThrowOnError>({
    ...options,
    url: '/packages/{id}'
}); };

/**
 * Get top packages
 */
export const getTopPackages = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetTopPackagesResponse, GetTopPackagesError, ThrowOnError>({
    ...options,
    url: '/packages/top-packages'
}); };

/**
 * get payment form information from Morning
 */
export const postOrdersV1PaymentsForm = <ThrowOnError extends boolean = false>(options: Options<PostOrdersV1PaymentsFormData, ThrowOnError>) => { return (options?.client ?? client).post<PostOrdersV1PaymentsFormResponse, PostOrdersV1PaymentsFormError, ThrowOnError>({
    ...options,
    url: '/orders/v1/payments/form'
}); };

/**
 * Get payment success page information from Morning
 */
export const getOrdersPaymentStatus = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetOrdersPaymentStatusResponse, GetOrdersPaymentStatusError, ThrowOnError>({
    ...options,
    url: '/orders/payment/status'
}); };

/**
 * Get all orders
 */
export const getAllOrders = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllOrdersResponse, GetAllOrdersError, ThrowOnError>({
    ...options,
    url: '/orders'
}); };

/**
 * Notify about payment success
 */
export const postOrdersNotify = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<PostOrdersNotifyResponse, PostOrdersNotifyError, ThrowOnError>({
    ...options,
    url: '/orders/notify'
}); };

/**
 * Update user information
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => { return (options?.client ?? client).post<PostUsersResponse, PostUsersError, ThrowOnError>({
    ...options,
    url: '/users'
}); };

/**
 * Add to cart
 */
export const postUsersAddToCart = <ThrowOnError extends boolean = false>(options: Options<PostUsersAddToCartData, ThrowOnError>) => { return (options?.client ?? client).post<PostUsersAddToCartResponse, PostUsersAddToCartError, ThrowOnError>({
    ...options,
    url: '/users/addToCart'
}); };
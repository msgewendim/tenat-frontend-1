// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { AppControllerGetHelloData, AppControllerGetHelloResponses, AppControllerHealthCheckData, AppControllerHealthCheckResponses, UsersControllerFindAllData, UsersControllerFindAllResponses, UsersControllerCreateData, UsersControllerCreateResponses, UsersControllerRemoveData, UsersControllerRemoveResponses, UsersControllerFindOneData, UsersControllerFindOneResponses, UsersControllerUpdateData, UsersControllerUpdateResponses, UsersControllerClearCartData, UsersControllerClearCartResponses, UsersControllerAddToCartData, UsersControllerAddToCartResponses, ProductsControllerFindAllData, ProductsControllerFindAllResponses, ProductsControllerCreateData, ProductsControllerCreateResponses, ProductsControllerGetProductsByNameData, ProductsControllerGetProductsByNameResponses, ProductsControllerGetRandomProductsData, ProductsControllerGetRandomProductsResponses, ProductsControllerRemoveData, ProductsControllerRemoveResponses, ProductsControllerFindOneData, ProductsControllerFindOneResponses, ProductsControllerUpdateData, ProductsControllerUpdateResponses, RecipesControllerFindAllData, RecipesControllerFindAllResponses, RecipesControllerCreateData, RecipesControllerCreateResponses, RecipesControllerGetRecipesByNameData, RecipesControllerGetRecipesByNameResponses, RecipesControllerGetRandomRecipesData, RecipesControllerGetRandomRecipesResponses, RecipesControllerRemoveData, RecipesControllerRemoveResponses, RecipesControllerFindOneData, RecipesControllerFindOneResponses, RecipesControllerUpdateData, RecipesControllerUpdateResponses, PackagesControllerFindAllData, PackagesControllerFindAllResponses, PackagesControllerCreateData, PackagesControllerCreateResponses, PackagesControllerGetRandomPackagesData, PackagesControllerGetRandomPackagesResponses, PackagesControllerRemoveData, PackagesControllerRemoveResponses, PackagesControllerFindOneData, PackagesControllerFindOneResponses, PackagesControllerUpdateData, PackagesControllerUpdateResponses, OrdersControllerFindAllData, OrdersControllerFindAllResponses, OrdersControllerCreateData, OrdersControllerCreateResponses, OrdersControllerGenerateSaleData, OrdersControllerGenerateSaleResponses, OrdersControllerGenerateSaleErrors, OrdersControllerHandlePaymentWebhookData, OrdersControllerHandlePaymentWebhookResponses, OrdersControllerHandlePaymentWebhookErrors, OrdersControllerNotifyData, OrdersControllerNotifyResponses, OrdersControllerFindByCustomerEmailData, OrdersControllerFindByCustomerEmailResponses, OrdersControllerRemoveData, OrdersControllerRemoveResponses, OrdersControllerRemoveErrors, OrdersControllerFindOneData, OrdersControllerFindOneResponses, OrdersControllerFindOneErrors, OrdersControllerUpdateData, OrdersControllerUpdateResponses, OrdersControllerUpdateErrors, UploadControllerUploadImagesPublicData, UploadControllerUploadImagesPublicResponses, UploadControllerUploadImagesPublicErrors, UploadControllerUploadImagesData, UploadControllerUploadImagesResponses, UploadControllerUploadImagesErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetHelloResponses, unknown, ThrowOnError>({
        url: '/api',
        ...options
    });
};

export const appControllerHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<AppControllerHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerHealthCheckResponses, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

export const usersControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/users',
        ...options
    });
};

export const usersControllerCreate = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersControllerRemove = <ThrowOnError extends boolean = false>(options: Options<UsersControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

export const usersControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<UsersControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

export const usersControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersControllerClearCart = <ThrowOnError extends boolean = false>(options: Options<UsersControllerClearCartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersControllerClearCartResponses, unknown, ThrowOnError>({
        url: '/api/users/{id}/cart',
        ...options
    });
};

export const usersControllerAddToCart = <ThrowOnError extends boolean = false>(options: Options<UsersControllerAddToCartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerAddToCartResponses, unknown, ThrowOnError>({
        url: '/api/users/{id}/cart',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const productsControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<ProductsControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProductsControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/products',
        ...options
    });
};

export const productsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ProductsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProductsControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const productsControllerGetProductsByName = <ThrowOnError extends boolean = false>(options?: Options<ProductsControllerGetProductsByNameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProductsControllerGetProductsByNameResponses, unknown, ThrowOnError>({
        url: '/api/products/names',
        ...options
    });
};

export const productsControllerGetRandomProducts = <ThrowOnError extends boolean = false>(options: Options<ProductsControllerGetRandomProductsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProductsControllerGetRandomProductsResponses, unknown, ThrowOnError>({
        url: '/api/products/random',
        ...options
    });
};

export const productsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ProductsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProductsControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/products/{id}',
        ...options
    });
};

export const productsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ProductsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProductsControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/products/{id}',
        ...options
    });
};

export const productsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ProductsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProductsControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/products/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const recipesControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<RecipesControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RecipesControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/recipes',
        ...options
    });
};

export const recipesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<RecipesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RecipesControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/recipes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const recipesControllerGetRecipesByName = <ThrowOnError extends boolean = false>(options: Options<RecipesControllerGetRecipesByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RecipesControllerGetRecipesByNameResponses, unknown, ThrowOnError>({
        url: '/api/recipes/names',
        ...options
    });
};

export const recipesControllerGetRandomRecipes = <ThrowOnError extends boolean = false>(options: Options<RecipesControllerGetRandomRecipesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RecipesControllerGetRandomRecipesResponses, unknown, ThrowOnError>({
        url: '/api/recipes/random',
        ...options
    });
};

export const recipesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<RecipesControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RecipesControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/recipes/{id}',
        ...options
    });
};

export const recipesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<RecipesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RecipesControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/recipes/{id}',
        ...options
    });
};

export const recipesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<RecipesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RecipesControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/recipes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const packagesControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<PackagesControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PackagesControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/packages',
        ...options
    });
};

export const packagesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<PackagesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PackagesControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/packages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const packagesControllerGetRandomPackages = <ThrowOnError extends boolean = false>(options: Options<PackagesControllerGetRandomPackagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PackagesControllerGetRandomPackagesResponses, unknown, ThrowOnError>({
        url: '/api/packages/random',
        ...options
    });
};

export const packagesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<PackagesControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PackagesControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/api/packages/{id}',
        ...options
    });
};

export const packagesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<PackagesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PackagesControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/api/packages/{id}',
        ...options
    });
};

export const packagesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<PackagesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PackagesControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/api/packages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all orders with pagination
 */
export const ordersControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<OrdersControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrdersControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/api/orders',
        ...options
    });
};

/**
 * Create a new order
 */
export const ordersControllerCreate = <ThrowOnError extends boolean = false>(options: Options<OrdersControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrdersControllerCreateResponses, unknown, ThrowOnError>({
        url: '/api/orders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate sale order with PayPlus payment link
 * Creates order from minimal cart data, verifies pricing from database, and generates PayPlus payment link
 */
export const ordersControllerGenerateSale = <ThrowOnError extends boolean = false>(options: Options<OrdersControllerGenerateSaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrdersControllerGenerateSaleResponses, OrdersControllerGenerateSaleErrors, ThrowOnError>({
        url: '/api/orders/generate-sale',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Handle PayPlus payment webhook
 * Receives and processes payment status updates from PayPlus
 */
export const ordersControllerHandlePaymentWebhook = <ThrowOnError extends boolean = false>(options: Options<OrdersControllerHandlePaymentWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrdersControllerHandlePaymentWebhookResponses, OrdersControllerHandlePaymentWebhookErrors, ThrowOnError>({
        url: '/api/orders/webhook/payment-notification',
        ...options
    });
};

/**
 * Legacy payment notification endpoint
 * Legacy endpoint for payment notifications (use webhook/payment-notification instead)
 */
export const ordersControllerNotify = <ThrowOnError extends boolean = false>(options?: Options<OrdersControllerNotifyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<OrdersControllerNotifyResponses, unknown, ThrowOnError>({
        url: '/api/orders/notify',
        ...options
    });
};

/**
 * Get orders by customer email
 */
export const ordersControllerFindByCustomerEmail = <ThrowOnError extends boolean = false>(options: Options<OrdersControllerFindByCustomerEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrdersControllerFindByCustomerEmailResponses, unknown, ThrowOnError>({
        url: '/api/orders/customer/{email}',
        ...options
    });
};

/**
 * Delete order by ID
 */
export const ordersControllerRemove = <ThrowOnError extends boolean = false>(options: Options<OrdersControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrdersControllerRemoveResponses, OrdersControllerRemoveErrors, ThrowOnError>({
        url: '/api/orders/{id}',
        ...options
    });
};

/**
 * Get order by ID
 */
export const ordersControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<OrdersControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrdersControllerFindOneResponses, OrdersControllerFindOneErrors, ThrowOnError>({
        url: '/api/orders/{id}',
        ...options
    });
};

/**
 * Update order by ID
 */
export const ordersControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<OrdersControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrdersControllerUpdateResponses, OrdersControllerUpdateErrors, ThrowOnError>({
        url: '/api/orders/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload images (Public)
 * Public endpoint for uploading images. No authentication required but has stricter rate limits and file restrictions.
 */
export const uploadControllerUploadImagesPublic = <ThrowOnError extends boolean = false>(options: Options<UploadControllerUploadImagesPublicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadControllerUploadImagesPublicResponses, UploadControllerUploadImagesPublicErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/upload/images/public',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Upload images (Authenticated)
 * Authenticated endpoint for uploading images. Requires valid JWT token and upload permissions. Higher file limits.
 */
export const uploadControllerUploadImages = <ThrowOnError extends boolean = false>(options: Options<UploadControllerUploadImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadControllerUploadImagesResponses, UploadControllerUploadImagesErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/upload/images',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};
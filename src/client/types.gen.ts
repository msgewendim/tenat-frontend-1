// This file is auto-generated by @hey-api/openapi-ts

export type Product = {
    /**
     * The unique identifier for the product.
     */
    _id?: string;
    /**
     * The name of the product.
     */
    name: string;
    /**
     * A brief description of the product.
     */
    shortDescription: string;
    /**
     * The price of the product.
     */
    price: number;
    /**
     * A list of image URLs for the product.
     */
    images: Array<(string)>;
    /**
     * The average rating of the product.
     */
    rate: number;
    /**
     * A list of category names the product belongs to.
     */
    categories: Array<(string)>;
    /**
     * The number of items in stock.
     */
    InStock: number;
    /**
     * The availability status of the product.
     */
    availability: 'In Stock' | 'Out of Stock' | 'Pre-order';
    /**
     * A list of weight options for the product.
     */
    weights: Array<(string)>;
    /**
     * An optional list of benefits associated with the product.
     */
    benefits?: Array<(string)>;
    /**
     * An optional list of reviews for the product.
     */
    reviews?: Array<Review>;
    /**
     * An optional list of related products.
     */
    relatedProducts?: Array<{
        /**
         * The unique identifier for the related product.
         */
        _id?: string;
        /**
         * The name of the related product.
         */
        name?: string;
        /**
         * The price of the related product.
         */
        price?: number;
        images?: Array<(string)>;
    }>;
    /**
     * An optional field for the total number of sales.
     */
    totalSales?: number;
};

/**
 * The availability status of the product.
 */
export enum availability {
    IN_STOCK = 'In Stock',
    OUT_OF_STOCK = 'Out of Stock',
    PRE_ORDER = 'Pre-order'
}

export type ProductCardProps = {
    /**
     * Unique identifier for the product
     */
    _id: string;
    /**
     * Name of the product
     */
    name: string;
    /**
     * Price of the product
     */
    price: number;
    /**
     * URL of the product image
     */
    image: string;
    /**
     * List of categories the product belongs to
     */
    categories: Array<(string)>;
    /**
     * Rating of the product (e.g., 1 to 5)
     */
    rate: number;
    /**
     * A brief description of the product
     */
    shortDescription: string;
    /**
     * Optional size of the image (e.g., width or height)
     */
    imageSize?: number;
};

export type Review = {
    /**
     * ID of the user who wrote the review
     */
    reviewerName?: string;
    /**
     * Rating given to the recipe (e.g., 1 to 5)
     */
    rating: number;
    /**
     * Comment provided by the user for the recipe
     */
    comment: string;
    /**
     * The date and time when the review was created
     */
    createdAt?: string;
};

export type User = {
    /**
     * Unique identifier for the user
     */
    _id: string;
    username: string;
    email: string;
    password?: string;
    /**
     * URL to the user's profile picture
     */
    profilePicture?: (string) | null;
    savedRecipes?: Array<Recipe>;
    orderHistory?: Array<Order>;
    wishlist?: Array<Product>;
    cart?: Array<CartItem>;
    addresses?: Array<Address>;
    recipeReviews?: Array<(string)>;
    productReviews?: Array<unknown>;
    createdAt?: string;
    /**
     * Indicates if the user has administrative privileges
     */
    isAdmin: (boolean) | null;
};

export type Order = {
    /**
     * Unique identifier for the order
     */
    id: string;
    /**
     * The ID of the user who placed the order
     */
    userId: string;
    products: Array<CartItem>;
    /**
     * Total amount for the order
     */
    total: number;
};

export type Address = {
    /**
     * Unique identifier for the address
     */
    id: string;
    street: string;
    city: string;
    zip: string;
};

export type CartItem = {
    /**
     * The ID of the product in the cart
     */
    productId: string;
    /**
     * Quantity of the product in the cart
     */
    quantity: number;
};

export type Recipe = {
    /**
     * Unique identifier for the recipe
     */
    _id: string;
    title: string;
    description: string;
    /**
     * URL to an image of the recipe
     */
    image: string;
    ingredients: Array<Ingredient>;
    instructions: Array<(string)>;
    /**
     * Preparation time for the recipe (e.g., "30 minutes")
     */
    prepTime: string;
    difficulty: 'Easy' | 'Medium' | 'Hard';
    categories?: Array<(string)> | null;
    relatedRecipes?: Array<PartialRecipe> | null;
    reviews?: Array<Review> | null;
    createdAt?: string;
};

export enum difficulty {
    EASY = 'Easy',
    MEDIUM = 'Medium',
    HARD = 'Hard'
}

export type Category = {
    /**
     * Unique identifier for the category
     */
    _id?: (string) | null;
    name: string;
    images?: Array<(string)> | null;
    recipes?: Array<(string)> | null;
    products?: Array<(string)> | null;
};

export type PartialRecipe = {
    /**
     * Unique identifier for the recipe
     */
    _id: string;
    title: string;
    /**
     * URL to an image of the recipe
     */
    image: string;
};

export type Ingredient = {
    /**
     * Unique identifier for the ingredient
     */
    _id: string;
    name: string;
    /**
     * Amount of the ingredient required (e.g., "1 cup", "2 tbsp")
     */
    quantity: string;
};

export type GetAllProductsResponse = (Array<Product>);

export type GetAllProductsError = unknown;

export type PostProductsData = {
    body: Product;
};

export type PostProductsResponse = (unknown);

export type PostProductsError = (unknown);

export type GetProductData = {
    path: {
        /**
         * The product ID
         */
        id: string;
    };
};

export type GetProductResponse = (Product);

export type GetProductError = (unknown);

export type DeleteProductsByIdData = {
    path: {
        /**
         * The product ID
         */
        id: string;
    };
};

export type DeleteProductsByIdResponse = (void);

export type DeleteProductsByIdError = (unknown);

export type PutProductsByIdData = {
    body: Product;
    path: {
        /**
         * The product ID
         */
        id: string;
    };
};

export type PutProductsByIdResponse = (unknown);

export type PutProductsByIdError = (unknown);
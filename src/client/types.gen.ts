// This file is auto-generated by @hey-api/openapi-ts

export type CreateUserDto = {
    name: string;
    email: string;
    mobile: string;
    address: {
        [key: string]: unknown;
    };
    role: string;
    orders?: Array<string>;
    cart?: Array<string>;
};

export type CartItem = {
    /**
     * ID of the product in the cart
     */
    productId: string;
    /**
     * Quantity of the product in the cart
     */
    quantity: number;
    /**
     * Size of the product
     */
    size: string;
};

export type User = {
    /**
     * Unique identifier for the user
     */
    _id: string;
    /**
     * Full name of the user
     */
    name: string;
    /**
     * Email address of the user
     */
    email: string;
    /**
     * Mobile phone number
     */
    mobile: string;
    /**
     * User address information
     */
    address: {
        [key: string]: unknown;
    };
    /**
     * User role in the system
     */
    role: 'user' | 'admin' | 'moderator';
    /**
     * Array of order IDs associated with this user
     */
    orders?: Array<string>;
    /**
     * Shopping cart items
     */
    cart?: Array<CartItem>;
    /**
     * Date when the user was created
     */
    createdAt: string;
    /**
     * Date when the user was last updated
     */
    updatedAt: string;
};

export type UpdateUserDto = {
    [key: string]: unknown;
};

export type CartItemDto = {
    [key: string]: unknown;
};

export type ProductSizeDto = {
    sizeName: string;
    sizeQuantity: number;
};

export type PricingDto = {
    size: ProductSizeDto;
    price: number;
};

export type CategoryDto = {
    nameInHebrew: string;
    nameInEnglish: string;
};

export type SubCategoryDto = {
    nameInHebrew: string;
    nameInEnglish: string;
    nameOfParentCategory: string;
};

export type FeatureDto = {
    title: string;
    description: string;
};

export type FeatureObjectDto = {
    value: Array<FeatureDto>;
};

export type CreateProductDto = {
    name: string;
    shortDescription: string;
    pricing: Array<PricingDto>;
    image?: string;
    /**
     * Array of image URLs for the product
     */
    images?: Array<string>;
    categories: Array<CategoryDto>;
    subCategories?: Array<SubCategoryDto>;
    features: FeatureObjectDto;
    totalSales?: number;
};

export type ProductSize = {
    /**
     * Name of the size
     */
    sizeName: string;
    /**
     * Quantity for this size
     */
    sizeQuantity: number;
};

export type Pricing = {
    /**
     * Size information for this pricing tier
     */
    size: ProductSize;
    /**
     * Price for this size
     */
    price: number;
};

export type Category = {
    /**
     * Category name in Hebrew
     */
    nameInHebrew: string;
    /**
     * Category name in English
     */
    nameInEnglish: string;
};

export type SubCategory = {
    /**
     * Sub-category name in Hebrew
     */
    nameInHebrew: string;
    /**
     * Sub-category name in English
     */
    nameInEnglish: string;
    /**
     * Name of the parent category
     */
    nameOfParentCategory: string;
};

export type Feature = {
    /**
     * Title of the feature
     */
    title: string;
    /**
     * Description of the feature
     */
    description: string;
    _id?: string;
};

export type FeatureObject = {
    /**
     * Array of product features
     */
    value: Array<Feature>;
};

export type Product = {
    /**
     * Name of the product
     */
    name: string;
    /**
     * Short description of the product
     */
    shortDescription: string;
    /**
     * Available pricing options for different sizes
     */
    pricing: Array<Pricing>;
    /**
     * Main product image URL
     */
    image?: string;
    /**
     * Array of additional product image URLs
     */
    images?: Array<string>;
    /**
     * Product categories
     */
    categories: Array<Category>;
    /**
     * Product sub-categories
     */
    subCategories?: Array<SubCategory>;
    /**
     * Product features and attributes
     */
    features: FeatureObject;
    /**
     * Total number of sales for this product
     */
    totalSales: number;
    _id?: string;
};

export type UpdateProductDto = {
    [key: string]: unknown;
};

export type IngredientDto = {
    name: string;
    quantity: string;
    existsInProducts?: boolean;
};

export type InstructionDto = {
    step: number;
    description: string;
};

export type CreateRecipeDto = {
    name: string;
    description: string;
    image?: string;
    categories: Array<CategoryDto>;
    ingredients: Array<IngredientDto>;
    difficulty: 'Easy' | 'Medium' | 'Hard';
    instructions: Array<InstructionDto>;
    prepTime: string;
    servings: number;
};

export type Ingredient = {
    /**
     * Name of the ingredient
     */
    name: string;
    /**
     * Quantity of the ingredient needed
     */
    quantity: string;
    /**
     * Whether this ingredient exists in our products catalog
     */
    existsInProducts: boolean;
};

export type Instruction = {
    /**
     * Step number in the recipe
     */
    step: number;
    /**
     * Instruction description for this step
     */
    description: string;
};

export type Recipe = {
    /**
     * Name of the recipe
     */
    name: string;
    /**
     * Detailed description of the recipe
     */
    description: string;
    /**
     * Main recipe image URL
     */
    image: string;
    /**
     * Recipe categories
     */
    categories: Array<Category>;
    /**
     * List of ingredients needed for the recipe
     */
    ingredients: Array<Ingredient>;
    /**
     * Difficulty level of the recipe
     */
    difficulty: 'Easy' | 'Medium' | 'Hard';
    /**
     * Step-by-step cooking instructions
     */
    instructions: Array<Instruction>;
    /**
     * Preparation time required
     */
    prepTime: string;
    /**
     * Number of servings this recipe makes
     */
    servings: number;
    /**
     * Date when the recipe was created
     */
    createdAt: string;
    /**
     * Date when the recipe was last updated
     */
    updatedAt: string;
    _id?: string;
};

export type UpdateRecipeDto = {
    [key: string]: unknown;
};

export type CreatePackageDto = {
    name: string;
    image?: string;
    price: number;
    cookingTime: number;
    ingredientsQuantity: number;
    peoplesQuantity: number;
};

export type Package = {
    /**
     * Name of the package
     */
    name: string;
    /**
     * Package image URL
     */
    image?: string;
    /**
     * Price of the package
     */
    price: number;
    /**
     * Total cooking time in minutes
     */
    cookingTime: number;
    /**
     * Number of ingredients included
     */
    ingredientsQuantity: number;
    /**
     * Number of people this package serves
     */
    peoplesQuantity: number;
    _id?: string;
};

export type UpdatePackageDto = {
    [key: string]: unknown;
};

export type AddressDto = {
    street: string;
    streetNum: string;
    city: string;
    postal_code?: string;
    country?: string;
};

export type CustomerDto = {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    address: AddressDto;
};

export type CreateOrderDto = {
    customer: CustomerDto;
    items: Array<CartItemDto>;
    totalPrice: number;
};

export type OrderEntity = {
    [key: string]: unknown;
};

export type MinimalCartItemDto = {
    /**
     * ID of the item (Product or Package)
     */
    itemId: string;
    /**
     * Quantity of the item in the cart
     */
    quantity: number;
    /**
     * Size of the product in grams or kg
     */
    size: string;
    /**
     * Price of the item in the cart
     */
    price: number;
    /**
     * Type of the item (Product or Package)
     */
    itemType: 'Product' | 'Package';
};

export type CheckoutPayloadDto = {
    /**
     * Total price of all items
     */
    totalPrice: number;
    /**
     * Customer information
     */
    customer: CustomerDto;
    /**
     * Minimal cart items with only IDs and essential data
     */
    orderItems: Array<MinimalCartItemDto>;
};

export type UpdateOrderDto = {
    [key: string]: unknown;
};

export type SingleUploadResponseDto = {
    /**
     * Original filename of the uploaded file
     */
    originalName: string;
    /**
     * Secure URL of the uploaded file on Cloudinary
     */
    url: string;
    /**
     * File size in bytes
     */
    size: number;
    /**
     * MIME type of the file
     */
    mimeType: string;
};

export type Address = {
    /**
     * Street name
     */
    street: string;
    /**
     * Street number
     */
    streetNum: string;
    /**
     * City name
     */
    city: string;
    /**
     * Postal code
     */
    postal_code?: string;
    /**
     * Country name
     */
    country: string;
};

export type Customer = {
    /**
     * Customer first name
     */
    firstName: string;
    /**
     * Customer last name
     */
    lastName: string;
    /**
     * Customer email address
     */
    email: string;
    /**
     * Customer phone number
     */
    phone: string;
    /**
     * Customer address
     */
    address: Address;
};

export type OrderItem = {
    /**
     * ID of the item (Product or Package)
     */
    item: string;
    /**
     * Type of the item
     */
    itemType: 'Product' | 'Package';
    /**
     * Quantity of the item
     */
    quantity: number;
    /**
     * Price of the item
     */
    price: number;
    /**
     * Size of the product
     */
    size: string;
    /**
     * Name of the item
     */
    name: string;
    /**
     * Item image URL
     */
    image?: string;
};

export type PaymentDetails = {
    /**
     * Transaction unique identifier
     */
    transaction_uid?: string;
    /**
     * Transaction status
     */
    transaction_status?: string;
    /**
     * Transaction amount
     */
    transaction_amount?: number;
    /**
     * Transaction currency
     */
    transaction_currency: string;
    /**
     * Transaction date
     */
    transaction_date?: string;
    /**
     * Transaction type
     */
    transaction_type?: string;
    /**
     * Number of payments
     */
    number_of_payments: number;
    /**
     * First payment amount
     */
    first_payment_amount?: number;
    /**
     * Rest payments amount
     */
    rest_payments_amount?: number;
    /**
     * Card holder name
     */
    card_holder_name?: string;
    /**
     * Customer unique identifier
     */
    customer_uid?: string;
    /**
     * Terminal unique identifier
     */
    terminal_uid?: string;
};

export type Order = {
    /**
     * Customer information
     */
    customer: Customer;
    /**
     * List of ordered items
     */
    items: Array<OrderItem>;
    /**
     * Total price of the order
     */
    totalPrice: number;
    /**
     * Order status
     */
    status: 'pending' | 'processing' | 'paid' | 'failed' | 'cancelled';
    /**
     * Payment details
     */
    paymentDetails?: PaymentDetails;
    /**
     * Date when the order was created
     */
    createdAt: string;
    /**
     * Date when the order was last updated
     */
    updatedAt: string;
};

export type AppControllerGetHelloData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api';
};

export type AppControllerGetHelloResponses = {
    200: unknown;
};

export type AppControllerHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health';
};

export type AppControllerHealthCheckResponses = {
    200: unknown;
};

export type UsersControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type UsersControllerFindAllResponses = {
    /**
     * Return all users.
     */
    200: Array<User>;
};

export type UsersControllerFindAllResponse = UsersControllerFindAllResponses[keyof UsersControllerFindAllResponses];

export type UsersControllerCreateData = {
    body: CreateUserDto;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type UsersControllerCreateResponses = {
    /**
     * The user has been successfully created.
     */
    201: User;
};

export type UsersControllerCreateResponse = UsersControllerCreateResponses[keyof UsersControllerCreateResponses];

export type UsersControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type UsersControllerRemoveResponses = {
    /**
     * The user has been successfully deleted.
     */
    200: unknown;
};

export type UsersControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type UsersControllerFindOneResponses = {
    /**
     * Return a single user.
     */
    200: User;
};

export type UsersControllerFindOneResponse = UsersControllerFindOneResponses[keyof UsersControllerFindOneResponses];

export type UsersControllerUpdateData = {
    body: UpdateUserDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type UsersControllerUpdateResponses = {
    /**
     * The user has been successfully updated.
     */
    200: User;
};

export type UsersControllerUpdateResponse = UsersControllerUpdateResponses[keyof UsersControllerUpdateResponses];

export type UsersControllerClearCartData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}/cart';
};

export type UsersControllerClearCartResponses = {
    /**
     * The cart has been successfully cleared.
     */
    200: User;
};

export type UsersControllerClearCartResponse = UsersControllerClearCartResponses[keyof UsersControllerClearCartResponses];

export type UsersControllerAddToCartData = {
    body: CartItemDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}/cart';
};

export type UsersControllerAddToCartResponses = {
    /**
     * The item has been successfully added to the cart.
     */
    201: User;
};

export type UsersControllerAddToCartResponse = UsersControllerAddToCartResponses[keyof UsersControllerAddToCartResponses];

export type ProductsControllerFindAllData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
        searchTerm: string;
        category: string;
        subCategory: string;
        excludeById: string;
    };
    url: '/api/products';
};

export type ProductsControllerFindAllResponses = {
    /**
     * Return all products.
     */
    200: Array<Product>;
};

export type ProductsControllerFindAllResponse = ProductsControllerFindAllResponses[keyof ProductsControllerFindAllResponses];

export type ProductsControllerCreateData = {
    body: CreateProductDto;
    path?: never;
    query?: never;
    url: '/api/products';
};

export type ProductsControllerCreateResponses = {
    /**
     * The product has been successfully created.
     */
    201: Product;
};

export type ProductsControllerCreateResponse = ProductsControllerCreateResponses[keyof ProductsControllerCreateResponses];

export type ProductsControllerGetProductsByNameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/products/names';
};

export type ProductsControllerGetProductsByNameResponses = {
    /**
     * Return products by name.
     */
    200: Array<Product>;
};

export type ProductsControllerGetProductsByNameResponse = ProductsControllerGetProductsByNameResponses[keyof ProductsControllerGetProductsByNameResponses];

export type ProductsControllerGetRandomProductsData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
    };
    url: '/api/products/random';
};

export type ProductsControllerGetRandomProductsResponses = {
    /**
     * Return random products.
     */
    200: Array<Product>;
};

export type ProductsControllerGetRandomProductsResponse = ProductsControllerGetRandomProductsResponses[keyof ProductsControllerGetRandomProductsResponses];

export type ProductsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/products/{id}';
};

export type ProductsControllerRemoveResponses = {
    /**
     * The product has been successfully deleted.
     */
    200: unknown;
};

export type ProductsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/products/{id}';
};

export type ProductsControllerFindOneResponses = {
    /**
     * Return a single product.
     */
    200: Product;
};

export type ProductsControllerFindOneResponse = ProductsControllerFindOneResponses[keyof ProductsControllerFindOneResponses];

export type ProductsControllerUpdateData = {
    body: UpdateProductDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/products/{id}';
};

export type ProductsControllerUpdateResponses = {
    /**
     * The product has been successfully updated.
     */
    200: Product;
};

export type ProductsControllerUpdateResponse = ProductsControllerUpdateResponses[keyof ProductsControllerUpdateResponses];

export type RecipesControllerFindAllData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
        searchTerm: string;
        category: string;
        excludeById: string;
    };
    url: '/api/recipes';
};

export type RecipesControllerFindAllResponses = {
    /**
     * Return all recipes.
     */
    200: Array<Recipe>;
};

export type RecipesControllerFindAllResponse = RecipesControllerFindAllResponses[keyof RecipesControllerFindAllResponses];

export type RecipesControllerCreateData = {
    body: CreateRecipeDto;
    path?: never;
    query?: never;
    url: '/api/recipes';
};

export type RecipesControllerCreateResponses = {
    /**
     * The recipe has been successfully created.
     */
    201: Recipe;
};

export type RecipesControllerCreateResponse = RecipesControllerCreateResponses[keyof RecipesControllerCreateResponses];

export type RecipesControllerGetRecipesByNameData = {
    body?: never;
    path?: never;
    query: {
        name: string;
    };
    url: '/api/recipes/names';
};

export type RecipesControllerGetRecipesByNameResponses = {
    /**
     * Return recipes by name.
     */
    200: Array<Recipe>;
};

export type RecipesControllerGetRecipesByNameResponse = RecipesControllerGetRecipesByNameResponses[keyof RecipesControllerGetRecipesByNameResponses];

export type RecipesControllerGetRandomRecipesData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
    };
    url: '/api/recipes/random';
};

export type RecipesControllerGetRandomRecipesResponses = {
    /**
     * Return random recipes.
     */
    200: Array<Recipe>;
};

export type RecipesControllerGetRandomRecipesResponse = RecipesControllerGetRandomRecipesResponses[keyof RecipesControllerGetRandomRecipesResponses];

export type RecipesControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/recipes/{id}';
};

export type RecipesControllerRemoveResponses = {
    /**
     * The recipe has been successfully deleted.
     */
    200: unknown;
};

export type RecipesControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/recipes/{id}';
};

export type RecipesControllerFindOneResponses = {
    /**
     * Return a single recipe.
     */
    200: Recipe;
};

export type RecipesControllerFindOneResponse = RecipesControllerFindOneResponses[keyof RecipesControllerFindOneResponses];

export type RecipesControllerUpdateData = {
    body: UpdateRecipeDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/recipes/{id}';
};

export type RecipesControllerUpdateResponses = {
    /**
     * The recipe has been successfully updated.
     */
    200: Recipe;
};

export type RecipesControllerUpdateResponse = RecipesControllerUpdateResponses[keyof RecipesControllerUpdateResponses];

export type PackagesControllerFindAllData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
    };
    url: '/api/packages';
};

export type PackagesControllerFindAllResponses = {
    /**
     * Return all packages.
     */
    200: Array<Package>;
};

export type PackagesControllerFindAllResponse = PackagesControllerFindAllResponses[keyof PackagesControllerFindAllResponses];

export type PackagesControllerCreateData = {
    body: CreatePackageDto;
    path?: never;
    query?: never;
    url: '/api/packages';
};

export type PackagesControllerCreateResponses = {
    /**
     * The package has been successfully created.
     */
    201: Package;
};

export type PackagesControllerCreateResponse = PackagesControllerCreateResponses[keyof PackagesControllerCreateResponses];

export type PackagesControllerGetRandomPackagesData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
    };
    url: '/api/packages/random';
};

export type PackagesControllerGetRandomPackagesResponses = {
    /**
     * Return random packages.
     */
    200: Array<Package>;
};

export type PackagesControllerGetRandomPackagesResponse = PackagesControllerGetRandomPackagesResponses[keyof PackagesControllerGetRandomPackagesResponses];

export type PackagesControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/packages/{id}';
};

export type PackagesControllerRemoveResponses = {
    /**
     * The package has been successfully deleted.
     */
    200: unknown;
};

export type PackagesControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/packages/{id}';
};

export type PackagesControllerFindOneResponses = {
    /**
     * Return a single package.
     */
    200: Package;
};

export type PackagesControllerFindOneResponse = PackagesControllerFindOneResponses[keyof PackagesControllerFindOneResponses];

export type PackagesControllerUpdateData = {
    body: UpdatePackageDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/packages/{id}';
};

export type PackagesControllerUpdateResponses = {
    /**
     * The package has been successfully updated.
     */
    200: Package;
};

export type PackagesControllerUpdateResponse = PackagesControllerUpdateResponses[keyof PackagesControllerUpdateResponses];

export type OrdersControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
        limit?: number;
    };
    url: '/api/orders';
};

export type OrdersControllerFindAllResponses = {
    /**
     * Orders retrieved successfully
     */
    200: {
        orders?: Array<OrderEntity>;
        total?: number;
        page?: number;
        totalPages?: number;
    };
};

export type OrdersControllerFindAllResponse = OrdersControllerFindAllResponses[keyof OrdersControllerFindAllResponses];

export type OrdersControllerCreateData = {
    body: CreateOrderDto;
    path?: never;
    query?: never;
    url: '/api/orders';
};

export type OrdersControllerCreateResponses = {
    /**
     * Order created successfully
     */
    201: OrderEntity;
};

export type OrdersControllerCreateResponse = OrdersControllerCreateResponses[keyof OrdersControllerCreateResponses];

export type OrdersControllerGenerateSaleData = {
    body: CheckoutPayloadDto;
    path?: never;
    query?: never;
    url: '/api/orders/generate-sale';
};

export type OrdersControllerGenerateSaleErrors = {
    /**
     * Invalid order data or price verification failed
     */
    400: unknown;
    /**
     * Product or Package not found
     */
    404: unknown;
};

export type OrdersControllerGenerateSaleResponses = {
    /**
     * Payment link generated successfully
     */
    201: {
        order?: OrderEntity;
        paymentLink?: string;
        pageRequestUid?: string;
    };
};

export type OrdersControllerGenerateSaleResponse = OrdersControllerGenerateSaleResponses[keyof OrdersControllerGenerateSaleResponses];

export type OrdersControllerHandlePaymentWebhookData = {
    body?: never;
    headers: {
        'x-payplus-signature': string;
    };
    path?: never;
    query?: never;
    url: '/api/orders/webhook/payment-notification';
};

export type OrdersControllerHandlePaymentWebhookErrors = {
    /**
     * Invalid webhook signature or payload
     */
    400: unknown;
    /**
     * Order not found
     */
    404: unknown;
};

export type OrdersControllerHandlePaymentWebhookResponses = {
    /**
     * Webhook processed successfully
     */
    200: OrderEntity;
};

export type OrdersControllerHandlePaymentWebhookResponse = OrdersControllerHandlePaymentWebhookResponses[keyof OrdersControllerHandlePaymentWebhookResponses];

export type OrdersControllerNotifyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/orders/notify';
};

export type OrdersControllerNotifyResponses = {
    201: unknown;
};

export type OrdersControllerFindByCustomerEmailData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/api/orders/customer/{email}';
};

export type OrdersControllerFindByCustomerEmailResponses = {
    /**
     * Customer orders retrieved successfully
     */
    200: Array<OrderEntity>;
};

export type OrdersControllerFindByCustomerEmailResponse = OrdersControllerFindByCustomerEmailResponses[keyof OrdersControllerFindByCustomerEmailResponses];

export type OrdersControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/orders/{id}';
};

export type OrdersControllerRemoveErrors = {
    /**
     * Order not found
     */
    404: unknown;
};

export type OrdersControllerRemoveResponses = {
    /**
     * Order deleted successfully
     */
    200: unknown;
};

export type OrdersControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/orders/{id}';
};

export type OrdersControllerFindOneErrors = {
    /**
     * Order not found
     */
    404: unknown;
};

export type OrdersControllerFindOneResponses = {
    /**
     * Order retrieved successfully
     */
    200: OrderEntity;
};

export type OrdersControllerFindOneResponse = OrdersControllerFindOneResponses[keyof OrdersControllerFindOneResponses];

export type OrdersControllerUpdateData = {
    body: UpdateOrderDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/orders/{id}';
};

export type OrdersControllerUpdateErrors = {
    /**
     * Order not found
     */
    404: unknown;
};

export type OrdersControllerUpdateResponses = {
    /**
     * Order updated successfully
     */
    200: OrderEntity;
};

export type OrdersControllerUpdateResponse = OrdersControllerUpdateResponses[keyof OrdersControllerUpdateResponses];

export type UploadControllerUploadImagesPublicData = {
    body: {
        /**
         * Single image file to upload
         */
        file?: Blob | File;
        /**
         * Multiple image files to upload (max 3)
         */
        files?: Array<Blob | File>;
    };
    path?: never;
    query?: {
        /**
         * Cloudinary folder to upload to
         */
        folder?: string;
    };
    url: '/api/upload/images/public';
};

export type UploadControllerUploadImagesPublicErrors = {
    /**
     * Bad request - invalid files or missing files
     */
    400: unknown;
    /**
     * Too Many Requests - rate limit exceeded
     */
    429: unknown;
    /**
     * Internal server error - upload service failed
     */
    500: unknown;
};

export type UploadControllerUploadImagesPublicResponses = {
    /**
     * Upload successful
     */
    200: SingleUploadResponseDto;
};

export type UploadControllerUploadImagesPublicResponse = UploadControllerUploadImagesPublicResponses[keyof UploadControllerUploadImagesPublicResponses];

export type UploadControllerUploadImagesData = {
    body: {
        /**
         * Single image file to upload
         */
        file?: Blob | File;
        /**
         * Multiple image files to upload (max 10)
         */
        files?: Array<Blob | File>;
    };
    path?: never;
    query?: {
        /**
         * Cloudinary folder to upload to
         */
        folder?: string;
    };
    url: '/api/upload/images';
};

export type UploadControllerUploadImagesErrors = {
    /**
     * Bad request - invalid files or missing files
     */
    400: unknown;
    /**
     * Unauthorized - invalid or missing JWT token
     */
    401: unknown;
    /**
     * Forbidden - insufficient permissions
     */
    403: unknown;
    /**
     * Too Many Requests - rate limit exceeded
     */
    429: unknown;
    /**
     * Internal server error - upload service failed
     */
    500: unknown;
};

export type UploadControllerUploadImagesResponses = {
    /**
     * Upload successful
     */
    200: SingleUploadResponseDto;
};

export type UploadControllerUploadImagesResponse = UploadControllerUploadImagesResponses[keyof UploadControllerUploadImagesResponses];

export type ClientOptions = {
    baseUrl: string;
};